import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class EightPuzzle {
    private static final int WIDTH = 3;
    private static final int HEIGHT = 3;
    private static final int N_TILES = WIDTH * HEIGHT;
    public static final int TILE_COUNT = 3 * 3; // so I can get it somewhere else
    private Heuristic heuristic;
    private int[] initial;

    public EightPuzzle(int[] initial, Heuristic h) {
        this.initial = initial;
        this.heuristic = h;
    }

    public boolean isGoal(BoardState state) {
        return state.h == 0;
    }

    public BoardState initialState() {
        return new BoardState(initial);
    }


    public List<Action> possibleActions(BoardState state) {
        List<Action> result = new ArrayList<>();
        for (Action a : Action.values()) {
            if (isActionValid(state, a))
                result.add(a);
        }
        return result;
    }

    public boolean isActionValid(BoardState state, Action action) {
        switch (action) {
            case UP:
                return state.empty != 0 && state.empty != 1 && state.empty != 2;
            case DOWN:
                return state.empty != 6 && state.empty != 7 && state.empty != 8;
            case LEFT:
                return state.empty != 0 && state.empty != 3 && state.empty != 6;
            case RIGHT:
                return state.empty != 2 && state.empty != 5 && state.empty != 8;
            default:
                return false;
        }
    }

    public int heuristicOf(BoardState boardState) {
        return boardState.h;
    }

    public BoardState apply(BoardState state, Action action) {
        int[] newBoard = state.toArray();
        if (!isActionValid(state, action)) {
            System.out.println("Tried to do invalid action: " + action);
            return null;
        }
        switch (action) {
            case UP:
                newBoard[state.empty] = newBoard[state.empty - 3];
                newBoard[state.empty - 3] = 0;
                break;
            case DOWN:
                newBoard[state.empty] = newBoard[state.empty + 3];
                newBoard[state.empty + 3] = 0;
                break;
            case LEFT:
                newBoard[state.empty] = newBoard[state.empty - 1];
                newBoard[state.empty - 1] = 0;
                break;
            case RIGHT:
                newBoard[state.empty] = newBoard[state.empty + 1];
                newBoard[state.empty + 1] = 0;
                break;
            default:
                return null;
        }
        BoardState newState = new BoardState(newBoard);
        return newState;
    }

    public enum Action {
        UP, DOWN, LEFT, RIGHT;

        public Action undo() {
            switch (this) {
                case UP:
                    return DOWN;
                case DOWN:
                    return UP;
                case LEFT:
                    return RIGHT;
                case RIGHT:
                    return LEFT;
            }
            return null;
        }
    }


    public class BoardState {
        int[] currentBoard = new int[N_TILES];
        int empty;


        int h;

        private BoardState(int[] board) {
            System.arraycopy(board, 0, currentBoard, 0, N_TILES);
            for (int i = 0; i < N_TILES; i++) {
                if (currentBoard[i] == 0)
                    empty = i;
            }
            h = heuristic.calculate(this);
        }

        @Override
        public boolean equals(Object o) {
            // Generated by IDE
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            BoardState that = (BoardState) o;

            if (empty != that.empty) return false;
            return Arrays.equals(currentBoard, that.currentBoard);
        }

        @Override
        public int hashCode() {
            // Generated by IDE
            int result = Arrays.hashCode(currentBoard);
            result = 31 * result + empty;
            return result;
        }

        @Override
        public String toString() {
            return "BoardState{" +
                    "currentBoard=" + Arrays.toString(currentBoard) +
                    '}';
        }

        public int[] toArray() {
            int[] copy = new int[N_TILES];
            System.arraycopy(currentBoard, 0, copy, 0, N_TILES);
            return copy;
        }
    }
}